Assign1: Due 11:59PM September 29

***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late.

Using Test First Development (no code without test first) implement the problem you designed in hw2. Feel free to evolve that design and use your judgment to make changes based on the improved understanding and learning.

Take small steps, ask for frequent reviews.

First start with a tests list and a canary test.

After completing the assignment (and only after) answer the following questions:

1. What did you learn mainly in this assignment?

we have learned benefits of Test Driven development through this assignment. In TDD, we acknowledge that code is never written without first writing a test. This is a critical step for achieving a simple design.  Also, TDD forces us to stop and think again about our code before we write it. It also helps a workflow that helps to measurable steps, which can be really useful as a beginner developer.

2. How is your current design different, if at all, from the strategic design created in hw2?

From the strategic design, we planned to create many classes but our final code only has 1 class for the minesweeper. The other class that we planned in the first place turned into a variable or Enum.


3. Were there any surprises or things you did not expect along the way? Any 
particular problem faced, things you had to tackle that you did not expect 
beforehand?

we think TDD is hard to learn and use because the process itself actually gives you very little guidance as to how to practice it. When small things change in my code, then we have to update tests again. There's no way to eliminate this completely. When we doing this assignment, the thing that surprised us most were to figure out that TDD is about design, not about testing your code only. Without TDD, the program will become a huge mess, slowing other steps.  With TDD, we realize that It becomes more natural to code.

we didn't that we will have to write a lot of test. they are more than 200 line test code to check less than 100 line code.

Total [100]: 93
Code compiles [10]:
Program produces reasonably desired results when run [10]: -5
There was no GUI. Command line interface is very unwieldy.
There seems to be an error as well (see below).

All tests pass [20]:
Code Coverage [10]:
Test quality [10]:
Design quality [20]:

Code quality [10]: -2
check_game_state this method needs a round of refactoring to reduce noise and avoid some unnecessary steps.


Answers to questions in assign1.txt [10]:





   0 1 2 3 4 5 6 7 8 9 
-----------------------------------------------
0 |C C C C C C C C C C  
1 |C C C C C C C C C C  
2 |C C C S 1 C C C 2 1  
3 |C C C C C C C C 1 0  
4 |C C C C C C C 10 1 0             <------Not sure what that 10 means
5 |C C C C C C C C 1 1  
6 |C C C C C C C C C C  
7 |C C C C C C C C C C  
8 |C C C C C C C C C C  
9 |C C C C C C C C C C